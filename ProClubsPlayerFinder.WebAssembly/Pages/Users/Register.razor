@page "/users/register"

@inject CustomAuthStateProvider authStateProvider
@inject IAuthenticationService authService

<h3>Register as a Free Agent</h3>

@if (string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <br />
        <div>
            <label for="first name">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <br />
        <div>
            <label for="last name">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <br />
        <div>
            <label for="password">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary btn-block"> Register </button>
    </EditForm>

</div>

@code {
    ApiUserDto RegistrationModel = new ApiUserDto
    {
        Role = "Free Agent"
    };
    string message = string.Empty;

    private async Task HandleRegistration()
    {
        RegistrationModel.Role = "Free Agent";
        try
        {
            await authService.RegisterAsync(RegistrationModel);
            navManager.NavigateTo("/users/login");
        }
        catch (ApiException apiExc)
        {
            if (apiExc.StatusCode >= 200 && apiExc.StatusCode < 300)
                NavigateToLogin();

            message = apiExc.Response;
        }
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }
}

