@page "/users/login"

@inject CustomAuthStateProvider authStateProvider
@inject IAuthenticationService authService

<h3 class="text-white">Login</h3>

<div class="col-lg-3">
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="email" class="text-white">Email Address</label>
            <InputText class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>
        <br />
        <div>
            <label for="password" class="text-white">Password</label>
            <InputText class="form-control" type="password" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-success btn-block"> Login </button>
    </EditForm>
</div>

@code {
    LoginUserDto LoginModel = new LoginUserDto();
    string message = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var authResponse = await authService.LoginAsync(LoginModel);

            if (string.IsNullOrEmpty(authResponse.Token))
                navManager.NavigateTo("/users/login");
            else
            {
                LoginModel = new();
                await authStateProvider.UpdateAuthenticationState(authResponse.Token);
                navManager.NavigateTo("/");
            }

        }
        catch (ApiException apiExc)
        {
            if (apiExc.StatusCode >= 200 && apiExc.StatusCode < 300)
                NavigateToLogin();

            message = apiExc.Response;
        }
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }
}
