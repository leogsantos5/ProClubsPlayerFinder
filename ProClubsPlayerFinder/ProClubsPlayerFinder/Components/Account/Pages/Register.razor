@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ProClubsPlayerFinder.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<style>
    .background-image {
        background-image: url('images/ea-fc-24-clubs.jpg'); /* Replace with the path to your background image */
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        height: 100vh; /* Set height to cover the entire viewport height */
    }
</style>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-select-country@4.2.0/dist/css/bootstrap-select-country.min.css" rel="stylesheet">

<div class="background-image">
    <div class="col-md-3 ms-md-5 " style="padding-top: 15px;">
        <section class="card p-4">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2>Create a new account.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.FirstName" class="form-control form-control-sm" placeholder="First Name" />
                    <label for="firstName">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>

                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.LastName" class="form-control form-control-sm" placeholder="Last Name" />
                    <label for="lastName">Last Name</label>
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                </div>

                <div class="form-floating mb-2">
                    <InputDate @bind-Value="Input.DateOfBirth" class="form-control form-control-sm" placeholder="Date of Birth" />
                    <label for="dateOfBirth">Date of Birth</label>
                    <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
                </div>

                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.GamingPlatformAccountId" class="form-control form-control-sm" placeholder="Gaming Platform Account ID" />
                    <label for="gamingPlatformAccountId">Gaming Platform Account ID</label>
                    <ValidationMessage For="() => Input.GamingPlatformAccountId" class="text-danger" />
                </div>

                <div class="form-floating mb-2 align-items-center">
                    <InputSelect @bind-Value="Input.Country" class="form-select form-select-sm">
                        <option value="">Select a country</option>
                        @foreach (var country in GetCountries())
                        {
                            <option value="@country">@country</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Input.Country" class="text-danger" />
                </div>

                <div class="form-floating mb-2">
                    <InputText @bind-Value="Input.Email" class="form-control form-control-sm" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-2">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control form-control-sm" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-floating mb-2">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control form-control-sm" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <button type="submit" class="w-100 btn btn-outline-success">Register</button>
            </EditForm>
        </section>
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.Country = Input.Country;
        user.DateOfBirth = Input.DateOfBirth;
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.GamingPlatformAccountId = Input.GamingPlatformAccountId;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private List<string> GetCountries()
    {
        var countries = new List<string>
        {
            "Portugal", "England", "France", "Spain", "Norway", "Sweden", "Denmark", "Germany", "Italy", "Greece", "Belgium", "Switzerland", "Netherlands", 
        };
        return countries;
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The name must be at least 2 characters long and at max 20 characters long.", MinimumLength = 2)]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The name must be at least 2 characters long and at max 20 characters long.", MinimumLength = 2)]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Date of Birth")]
        public DateOnly DateOfBirth { get; set; } = new DateOnly();

        [Required]
        [StringLength(100, ErrorMessage = "The name must be at least 5 characters long and at max 20 characters long.", MinimumLength = 5)]
        [Display(Name = "Gaming Platform Account Id")]
        public string GamingPlatformAccountId { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The name must be at least 3 characters long and at max 20 characters long.", MinimumLength = 3)]
        [Display(Name = "Country")]
        public string Country { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
